---
Description: >-
  Application stack.
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  image:
    Type: String
  ExportStackName:
    Type: String
  S3Attachments:
    Type: String
  SNSARN:
    Type: String
  DBPassword:
    Type: String
  DBUsername:
    Type: String
  DomainName:
    Type: String
  CertARN:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Database Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId:
       Fn::ImportValue: !Sub '${ExportStackName}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebServerAutoScalingGroup
      Cooldown: 60
      MaxSize: 10
      MinSize: 3
      DesiredCapacity: 3
      HealthCheckType: EC2
      LaunchConfigurationName: asg_launch_config
      Tags:
      -
        Key: Name
        Value: webserver
        PropagateAtLaunch : "true"
      TargetGroupARNs: !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetA'
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetB'
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetC'
  asg_launch_config:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref image
      InstanceType: t2.micro
      KeyName: csye6225
      AssociatePublicIpAddress: "true"
      LaunchConfigurationName: asg_launch_config
      BlockDeviceMappings:
        - Device: "/dev/sdh"
          Ebs:
            Size: 20
            VolumeType: gp2
            AvailabilityZone: us-east-1b
            DeleteOnTermination: "true"
      SecurityGroups:
        - Fn::ImportValue: !Sub '${ExportStackName}-SecurityGroup'
      IamInstanceProfile: "EC2profile"
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash"
            - yum install python-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev python2.7 python-pip -y
            - pip install awscli
            - cd /home/centos
            - cat <<EOT >> env
            - AWS_ACCESS_KEY=""
            - AWS_SECRET_ACCESS_KEY=""
            - Fn::Join:
              - ""
              - - AWS_BUCKET=
                - !Ref S3Attachments
            - Fn::Join:
              - ""
              - - TOPIC_NOTIFY_ARN=
                - !Ref SNSARN
            - WEB_PORT=80
            - Fn::Join:
              - ''
              - - DB_HOST=
                - Fn::GetAtt:
                  - MyDB
                  - Endpoint.Address
            - DB_NAME="csye6225"
            - Fn::Join:
              - ""
              - - DB_USERNAME=
                - !Ref DBUsername
            - Fn::Join:
              - ""
              - - DB_PASSWORD=
                - !Ref DBPassword
            - EOT
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.medium
      Engine: MySQL
      DBInstanceIdentifier: csye6225-spring2019
      MultiAZ: false
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      PubliclyAccessible: true
      DBName: "csye6225"
      AllocatedStorage: "100"
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "DBSubnets"
      SubnetIds:
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetA'
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetB'
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetC'
  DyDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
      TableName: csye6225
      Tags:
      - Key: Name
        Value: csye6225
  SSL:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: ApplicationLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - Fn::ImportValue: !Sub '${ExportStackName}-LoadBalancerSecurityGroup'
      Subnets:
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetA'
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetB'
        - Fn::ImportValue: !Sub '${ExportStackName}-SubnetC'
      Tags:
      - Key: csye6225-loadbalancer
        Value: loadbalancer
      Type: application
  ALBListenerService1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          Ref: CertARN
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthCheckPath: "/"
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
      HealthCheckPort: '5050'
      HealthCheckProtocol: HTTPS
      Name: ALBTargetGroup
      Port: 5050
      Protocol: HTTP
      TargetType: instance
      VpcId: Fn::ImportValue: !Sub '${ExportStackName}-VPC'

  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        - HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
        - DNSName: !GetAtt ApplicationLoadBalancer.DNSName
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: EC2AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: EC2AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: EC2AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: EC2AutoScalingGroup
      ComparisonOperator: LessThanThreshold